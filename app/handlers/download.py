"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
"""
import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from app.models import User
from app.services.youtube_service import YouTubeService
from app.services.logger import get_logger

logger = get_logger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å YouTube
youtube_service = YouTubeService()


@router.message(F.text.regexp(r'(?:https?://)?(?:www\.)?(?:youtube\.com|youtu\.be)'))
async def youtube_url_handler(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫"""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if not youtube_service.is_valid_youtube_url(url):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube –≤–∏–¥–µ–æ.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ https://youtube.com/watch?v=VIDEO_ID\n"
            "‚Ä¢ https://youtu.be/VIDEO_ID"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await message.answer("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        video = await youtube_service.get_or_create_video(url)
        
        if not video:
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
        view_count_text = f"{video.view_count:,}" if video.view_count else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        info_text = f"""
üé¨ <b>{video.title}</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {video.channel_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {video.duration_formatted or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {view_count_text}
üìÖ <b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {video.upload_date.strftime('%d.%m.%Y') if video.upload_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        builder = InlineKeyboardBuilder()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
        qualities = await youtube_service.get_available_qualities(video)
        
        if qualities:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ MP4
            for quality in qualities[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∫–∞—á–µ—Å—Ç–≤
                builder.button(
                    text=f"üìπ {quality['name']} MP4",
                    callback_data=f"download:{video.id}:mp4:{quality['name']}"
                )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            builder.button(
                text="üìπ 720p MP4",
                callback_data=f"download:{video.id}:mp4:720p"
            )
            builder.button(
                text="üìπ 480p MP4",
                callback_data=f"download:{video.id}:mp4:480p"
            )
            builder.button(
                text="üìπ 360p MP4",
                callback_data=f"download:{video.id}:mp4:360p"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç MP3
        builder.button(
            text="üéµ MP3 (—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ)",
            callback_data=f"download:{video.id}:mp3:audio"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        builder.button(
            text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            callback_data=f"info:{video.id}"
        )
        
        builder.adjust(2, 1, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö —Ä—è–¥–∞—Ö, –ø–æ—Ç–æ–º –ø–æ 1
        
        await loading_msg.edit_text(
            info_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube URL {url}: {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.callback_query(F.data.startswith("download:"))
async def download_callback(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    try:
        _, video_id, format_type, quality = callback.data.split(":")
        video_id = int(video_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from app.models import Video
        video = await Video.get(id=video_id)
        
        await callback.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ: <b>{video.title}</b>\n"
            f"üìπ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n"
            f"üìÅ –§–æ—Ä–º–∞—Ç: {format_type.upper()}\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            parse_mode="HTML"
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        download_record = await youtube_service.download_video(
            video=video,
            user=user,
            quality=quality,
            format_type=format_type
        )
        
        if download_record and download_record.is_completed:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if download_record.file_path and os.path.exists(download_record.file_path):
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
                    file = FSInputFile(
                        download_record.file_path,
                        filename=f"{video.title[:50]}.{format_type}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    if format_type == "mp3":
                        sent_message = await callback.message.answer_audio(
                            file,
                            caption=f"üéµ <b>{video.title}</b>\nüì∫ {video.channel_name}",
                            parse_mode="HTML"
                        )
                    else:
                        sent_message = await callback.message.answer_video(
                            file,
                            caption=f"üé¨ <b>{video.title}</b>\nüì∫ {video.channel_name}",
                            parse_mode="HTML"
                        )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    if format_type == "mp3" and sent_message.audio:
                        download_record.telegram_file_id = sent_message.audio.file_id
                    elif sent_message.video:
                        download_record.telegram_file_id = sent_message.video.file_id
                    
                    await download_record.save(update_fields=["telegram_file_id"])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    await callback.message.edit_text(
                        f"‚úÖ <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                        f"üé¨ <b>–í–∏–¥–µ–æ:</b> {video.title}\n"
                        f"üìπ <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality}\n"
                        f"üìÅ <b>–§–æ—Ä–º–∞—Ç:</b> {format_type.upper()}\n"
                        f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {video.file_size_formatted or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                        parse_mode="HTML"
                    )
                    
                except TelegramBadRequest as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                    await callback.message.edit_text(
                        "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                    await callback.message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            else:
                await callback.message.edit_text(
                    "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
                )
        else:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å
            error_msg = download_record.error_message if download_record else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>\n{error_msg}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ download_callback: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.callback_query(F.data.startswith("info:"))
async def info_callback(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
    try:
        _, video_id = callback.data.split(":")
        video_id = int(video_id)
        
        from app.models import Video
        video = await Video.get(id=video_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = f"""
üé¨ <b>{video.title}</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {video.channel_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî <b>ID –∫–∞–Ω–∞–ª–∞:</b> <code>{video.channel_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>
‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {video.duration_formatted or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {f"{video.view_count:,}" if video.view_count else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üëç <b>–õ–∞–π–∫–∏:</b> {f"{video.like_count:,}" if video.like_count else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {video.upload_date.strftime('%d.%m.%Y') if video.upload_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–π:</b> {video.download_count}

üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href="{video.youtube_url}">–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ YouTube</a>
        """
        
        if video.description:
            # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
            desc = video.description[:500] + "..." if len(video.description) > 500 else video.description
            info_text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{desc}"
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é", callback_data=f"back_to_download:{video.id}")
        
        await callback.message.edit_text(
            info_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ info_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("back_to_download:"))
async def back_to_download_callback(callback: CallbackQuery, user: User):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    try:
        _, video_id = callback.data.split(":")
        video_id = int(video_id)
        
        from app.models import Video
        video = await Video.get(id=video_id)
        
        # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_text = f"""
üé¨ <b>{video.title}</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {video.channel_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {video.duration_formatted or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {f"{video.view_count:,}" if video.view_count else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</b> {video.upload_date.strftime('%d.%m.%Y') if video.upload_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
        """
        
        # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        
        qualities = await youtube_service.get_available_qualities(video)
        
        if qualities:
            for quality in qualities[:5]:
                builder.button(
                    text=f"üìπ {quality['name']} MP4",
                    callback_data=f"download:{video.id}:mp4:{quality['name']}"
                )
        else:
            builder.button(text="üìπ 720p MP4", callback_data=f"download:{video.id}:mp4:720p")
            builder.button(text="üìπ 480p MP4", callback_data=f"download:{video.id}:mp4:480p")
            builder.button(text="üìπ 360p MP4", callback_data=f"download:{video.id}:mp4:360p")
        
        builder.button(text="üéµ MP3 (—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ)", callback_data=f"download:{video.id}:mp3:audio")
        builder.button(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"info:{video.id}")
        builder.adjust(2, 1, 1)
        
        await callback.message.edit_text(
            info_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_download_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True) 