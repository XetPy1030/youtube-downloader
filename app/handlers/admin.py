"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.models import User
from app.services.user_service import UserService
from app.services.youtube_service import YouTubeService
from app.services.logger import get_logger
from app.middlewares import AdminMiddleware

logger = get_logger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
user_service = UserService()
youtube_service = YouTubeService()

router.message.middleware(AdminMiddleware())
router.callback_query.middleware(AdminMiddleware())


@router.message(Command("admin"))
async def admin_panel(message: Message, user: User):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await youtube_service.get_download_stats()
    users_count = await user_service.get_users_count()
    active_users = await user_service.get_active_users_count()
    
    admin_text = f"""
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}
‚Ä¢ üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats['total_downloads']}
‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['completed_downloads']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['failed_downloads']}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%
‚Ä¢ üìÖ –°–µ–≥–æ–¥–Ω—è: {stats['today_downloads']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    builder.button(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.button(text="üìπ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ", callback_data="admin_videos")
    builder.button(text="üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", callback_data="admin_cleanup")
    builder.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    builder.adjust(2)
    
    await message.answer(
        admin_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery, user: User):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    users = await user_service.get_all_users(limit=20)
    users_count = await user_service.get_users_count()
    
    users_text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> (–ø–æ–∫–∞–∑–∞–Ω–æ 20 –∏–∑ {users_count})\n\n"
    
    for u in users:
        status = "üëë" if u.is_admin else "üö´" if u.is_blocked else "üë§"
        users_text += f"{status} <b>{u.full_name}</b> (@{u.username or '–Ω–µ—Ç'})\n"
        users_text += f"    ID: <code>{u.telegram_id}</code> | –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {u.total_downloads}\n"
        users_text += f"    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {u.created_at.strftime('%d.%m.%Y')}\n\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_user_search")
    builder.button(text="üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_top")
    builder.button(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_user_blocked")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    
    await callback.message.edit_text(
        users_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, user: User):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    stats = await youtube_service.get_download_stats()
    
    stats_text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üì• <b>–°–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_downloads']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['completed_downloads']}
‚Ä¢ –û—à–∏–±–æ–∫: {stats['failed_downloads']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['today_downloads']}

üé¨ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ:</b>
    """
    
    for i, video in enumerate(stats['popular_videos'][:5], 1):
        stats_text += f"{i}. {video['title'][:50]}...\n"
        stats_text += f"   –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {video['download_count']}\n\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìà –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_export_stats")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_cleanup")
async def admin_cleanup_callback(callback: CallbackQuery, user: User):
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    
    await callback.answer("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã...")
    
    try:
        cleaned_count = await youtube_service.cleanup_old_files()
        
        cleanup_text = f"""
üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}
üìÅ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ

–§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.
        """
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        cleanup_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    
    await callback.message.edit_text(
        cleanup_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, user: User):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    broadcast_text = """
üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
<code>/broadcast –≤–∞—à–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ</code>

–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!
    """
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    
    await callback.message.edit_text(
        broadcast_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.message(Command("broadcast"))
async def broadcast_command(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text_parts = message.text.split(' ', 1)
    if len(text_parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n<code>/broadcast –≤–∞—à–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ</code>", parse_mode="HTML")
        return
    
    broadcast_text = text_parts[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await user_service.get_all_users(limit=1000)
    
    await message.answer(f"üì¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    sent_count = 0
    failed_count = 0
    
    for target_user in users:
        if target_user.is_blocked:
            continue
        
        try:
            await message.bot.send_message(
                target_user.telegram_id,
                f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n{broadcast_text}",
                parse_mode="HTML"
            )
            sent_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.telegram_id}: {e}")
            failed_count += 1
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
    )


@router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: CallbackQuery, user: User):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await youtube_service.get_download_stats()
    users_count = await user_service.get_users_count()
    active_users = await user_service.get_active_users_count()
    
    admin_text = f"""
üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_users}
‚Ä¢ üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats['total_downloads']}
‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['completed_downloads']}
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {stats['failed_downloads']}
‚Ä¢ üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%
‚Ä¢ üìÖ –°–µ–≥–æ–¥–Ω—è: {stats['today_downloads']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    builder.button(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.button(text="üìπ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ", callback_data="admin_videos")
    builder.button(text="üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", callback_data="admin_cleanup")
    builder.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    builder.adjust(2)
    
    await callback.message.edit_text(
        admin_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.message(Command("ban"))
async def ban_user_command(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text_parts = message.text.split(' ', 1)
    if len(text_parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<code>/ban user_id</code>", parse_mode="HTML")
        return
    
    try:
        target_user_id = int(text_parts[1])
        success = await user_service.block_user(target_user_id)
        
        if success:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.message(Command("unban"))
async def unban_user_command(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text_parts = message.text.split(' ', 1)
    if len(text_parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<code>/unban user_id</code>", parse_mode="HTML")
        return
    
    try:
        target_user_id = int(text_parts[1])
        success = await user_service.unblock_user(target_user_id)
        
        if success:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        else:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 